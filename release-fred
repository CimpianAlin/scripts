#!/bin/bash

# variables used by this script
# these variables are probably different for everybody
# so create $HOME/.freenetrc and override those with your desired values.

# Load configuration and utility functions.
source freenet-scripts-common || exit

# What to build / release. Possible values: "build", "snapshot"
target=""
# Whether to exit before releasing.
dryRun="false"

while :
do
    case $1 in
        --help | - | -\?)
            cat <<EOF
Builds and releases a version of Fred.
Prompts for confirmation before releasing.
Configuration file is at $configPath by default.
Requires --snapshot or --build.

# TODO: Is this a reasonable argument? My initial impression is no.
--config CONFIG   Path to freenetrc
--dry-run         If present, builds packages and skips releasing.
--build           If present packages the highest-numbered build tag.
                  Builds documentation.
--snapshot        If present packages the current HEAD.
                  Outputs into a pre/ subdirectory of the release directory.
                  Skips building documentation.
EOF
            exit 0
            ;;
        --config)
            CONFIG="$2"
            shift 2
            ;;
        --dry-run)
            dryRun="true"
            shift
            ;;
        --snapshot)
            target="snapshot"
            shift
            ;;
        --build)
            target="build"
            shift
            ;;
        --) # End of all options
            shift
            break
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *)  # No more options; stop parsing.
            break
            ;;
    esac
done

# Target should be set.
if [[ -z "$target" ]]; then
    echo "Target not set. Please specify --build or --snapshot."
    exit 13
fi

# If releasing a snapshot it goes into the pre/ subdirectory.
if [[ "$target" = "snapshot" ]]; then
    releaseDir="$releaseDir/pre"
fi

makeBuildDir
git clone "$fredDir" "$buildDir" || exit 2
cd "$fredDir"

# Function in freenet-scripts-common - sets $gitVersion, $buildNumber, and $commitID.
getBuildInfo
# If releasing a stable build checkout the latest build tag.
if [[ "$target" = "build" ]]; then
    echo "Building release."
elif [[ "$target" = "snapshot" ]]; then
    echo "Building snapshot."
    gitVersion=$(git describe --always --abbrev=40)
    commitID=$(git rev-parse HEAD)
else
    echo "Internal error: unrecognized target \"$target\"."
    exit 14
fi

cd "$buildDir"
git checkout "$gitVersion" || exit 12

# copy freenet-ext.jar
mkdir -p lib 2>/dev/null
cp "$freenetExtPath" lib/freenet-ext.jar || exit 3
mkdir -p lib/freenet
cp lib/freenet-ext.jar lib/freenet/ || exit 4
cp "$fredDir/lib/bcprov.jar" lib/ || exit 30

# Build script uses environment variables.
export jarsignerStoreLocation="$jarsignerStoreLocation"
export jarsignerStorePassword="$jarsignerStorePassword"
export jarsignerAlias="$jarsignerAlias"
export jarsignerCodeSigningKeyPassword="$jarsignerCodeSigningKeyPassword"

if [[ "$target" = "build" ]]; then
    ant -f build-clean.xml || exit 16
    ant javadoc || exit 32
    jarName="freenet-$gitVersion.jar"
elif [[ "$target" = "snapshot" ]]; then
    # now build it (without api doc)
    ant -f build-clean.xml -Ddoc.skip=true || exit 9
    jarName="freenet-$gitVersion-snapshot.jar"
else
    echo "Internal error: Unrecognized target \"$target\"."
    exit 15
fi

archiveName="freenet-$gitVersion-source.tar.bz2"

# move file in position
mv dist/freenet.jar "$jarName" || exit 10

# create source archive
git archive --format=tar HEAD --prefix="freenet-$gitVersion/" | bzip2 -v9 > "$archiveName" || exit 11

# Generate checksums and signatures for the jar and source archive.
# TODO: Binary sha512sum instead of sha1sum. Note that this will require changes to the installer and update scripts, we probably want to keep the .sha1's as well as .sha512/.sha256.
sha1sum "$jarName" > "$jarName.sha1"
sha1sum "$archiveName" > "$archiveName.sha1"
if [ -n "$signingUser" ]; then
    echo "Switching to signing user \"$signingUser\""
    signDir=$(mktemp -d)
    cp "$buildDir/$jarName" "$buildDir/$archiveName" "$signDir" || exit 18
    # signingUser is a top level user, so it has its own group, right?
    chgrp "$signingUser" "$signDir" || exit 19
    chmod g+rwx "$signDir" || exit 20
    chmod g+r "$signDir"/* || exit 21
    su - "$signingUser" -c "gpg --sign --detach-sign -o \"$signDir/$jarName.sig\" \"$signDir/$jarName\"; gpg --sign --detach-sign -o \"$signDir/$archiveName.sig\" \"$signDir/$archiveName\"" || exit 22
    cp "$signDir/$jarName.sig" "$signDir/$archiveName.sig" "$buildDir" || exit 23
    rm -Rf "$signDir"
else
    gpg --sign --detach-sign -o "$buildDir/$jarName.sig" "$buildDir/$jarName" || exit 17
    gpg --sign --detach-sign -o "$buildDir/$archiveName.sig" "$buildDir/$archiveName" || exit 17
fi

# make sure release directory exists
mkdir -p "$releaseDir"
# Copy files, checksums, and signatures to local release directory
cp "$jarName"* "$releaseDir"
cp "$archiveName"* "$releaseDir"
rm "$releaseDir/freenet.jar"
pushd "$releaseDir"
ln -s "$jarName" "freenet.jar"
popd

# Localization comparison for build.
if [[ "$target" = "build" ]]; then
    compareL10n $buildNumber || exit 33
fi

echo "Built $gitVersion as a $target release."
echo "Commit ID is $commitID"
if [[ "$dryRun" = "true" ]]; then
    echo "Dry run - exiting without performing release."
    exit 0
else
    require "Perform release?"
fi

echo "Performing release."

# create and update pointer files
echo "https://downloads.freenetproject.org/alpha/$jarName" > freenet-testing-latest.jar.url
wget -O ".registry" "https://downloads.freenetproject.org/alpha/.registry" || exit 28
sed -i "s/freenet-testing-latest.jar .*$/freenet-testing-latest.jar $jarName/" .registry || exit 29

if [[ "$target" = "build" ]]; then
    sed -i "s/freenet-stable-latest.jar .*$/freenet-stable-latest.jar $jarName/" .registry || exit 31
fi

# upload all files
rsync -vvzP "$jarName"* freenet-testing-latest.jar.url .registry "$archiveName"* "$targetHost:/var/www/downloads/alpha/" || exit 24

# Unlike a snapshot, a new build updates the localization diff and the stable-latest.url.
if [[ "$target" = "build" ]]; then
    rsync -vz "$releaseDir/$diffName" "$targetHost:/var/www/emu/l10n/" || exit 25
    rsync -vvzP freenet-testing-latest.jar.url "$targetHost:/var/www/downloads/alpha/freenet-stable-latest.jar.url" || exit 26
    rsync --delete -rz javadoc/* "$targetHost:/var/www/freenet-javadoc" || exit 27
fi

# upload snapshot binary and signature to freenet
if [[ "$target" = "snapshot" ]]; then
    echo "Inserting snapshot into Freenet."
    nc "$fcpHost" "$fcpPort" <<EOF
ClientHello
Name=Toad-update-$gitVersion
ExpectedVersion=2
End

ClientPut
URI=CHK@
Identifier=$jarName
Verbosity=1023
MaxRetries=-1
UploadFrom=disk
Filename=$releaseDir/$jarName
TargetFilename=$jarName
Persistence=forever
PriorityClass=1
Global=true
End

ClientPut
URI=CHK@
Identifier=$jarName.sig
Verbosity=1023
MaxRetries=-1
UploadFrom=disk
Filename=$releaseDir/$jarName.sig
TargetFilename=$jarName.sig
Persistence=forever
PriorityClass=1
Global=true
End
EOF
else
    echo "Not inserting build into Freenet. insert-update does that as part of release-build."
fi

echo "Release complete."
