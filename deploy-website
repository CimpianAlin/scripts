#!/bin/bash
set -o errexit

# Load configuration and utility functions.
source freenet-scripts-common || exit

cd $(dirname $0)
startingDir=$(pwd)
update=false
dryRun=false
testing=false
forceWebsiteID=""
forceFredID=""

show_help() {
    cat <<EOF
Usage: $0 [-u|--update]"

Generates and prompts for confirmation to deploy the website
for the latest version of Fred in the repository.

OPTIONS
    -u, --update    Update the website and fred repos before deploying.

    -d, --dry-run   Generate the website, but pause to allow inspection of the
                    output instead of deploying or updating the money totals.

    -t, --testing   Deploy the "next" branch to the testing subdomain, and
                    do not update the money totals."

    --force-website-id Checkout and verify the given git ID for the website.
                       Only if -u.

    --force-fred-id    Checkout and verify the given git ID for fred.
                       Only if -u.

The fred repo is used to determine the version and build tag
for substitution. The version is regex'd from Version.java, and the
build tag is last git tag listed matching '^build[0-9]{5}'.

The following values are substituted:
FREENETVERSION with the build number. Ex: 1405
FREENETTAG with the build tag. Ex: build014105

Pages containing MONEYBALANCE or MONEYDAYS are copied to
\"$moneyBalanceDir\"
so the values can be periodically updated automatically.
EOF
}

while :
do
    case $1 in
        -h | --help | -\?)
            show_help
            exit 0
            ;;
        -c | --config)
            configPath="$2"
            shift 2
            ;;
        -u | --update)
            update=true
            shift
            ;;
        -d | --dry-run)
            dryRun=true
            shift
            ;;
        -t | --testing)
            testing=true
            shift
            ;;
        --force-website-id)
            forceWebsiteID="$2"
            shift 2
            ;;
        --force-fred-id)
            forceFredID="$2"
            shift 2
            ;;
        --) # End of all options
            shift
            break
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *)  # No more options; stop parsing.
            break
            ;;
    esac
done

if $testing; then
    branch="next"
else
    branch="master"
fi

websiteOutputDir="$websiteDir/output"

function checkGitID {
    checkID=$1
    echo Checking git ID is "$checkID"
    if ! git checkout "$checkID"
    then
        echo Failed to checkout "$checkID"
        exit 4
    fi
    if ! actualID=$(git rev-parse --verify HEAD)
    then
        echo Failed to verify "$checkID"
        exit 5
    fi
    if ! [[ "$actualID" = "$checkID" ]]
    then
        echo Git verification failed, something very bad is happening
        exit 6
    fi
    echo Git ID verified: "$checkID"
}

#If requested, perform update before gathering information from repos.
if $update; then
    echo "Updating fred repo."
    cd "$fredDir"
    git remote update
    if ! [[ "$forceFredID" = "" ]]
    then
        checkGitID "$forceFredID"
    fi
    echo "Updating website repo."
    cd "$websiteDir"
    git remote update
    if ! [[ "$forceWebsiteID" = "" ]]
    then
        checkGitID "$forceWebsiteID"
    fi
    cd "$startingDir"
fi

pushd "$websiteDir"
git checkout "origin/$branch"
popd

#Determine version information.
getBuildInfo

#Read links to release files on Google Drive.
if [ ! -e google_drive_links ]; then
    echo "Missing Google Drive links. Please generate them:"
    echo "python upload-to-google-drive.py $buildNumber --skip_upload"
    exit 3
fi
source google_drive_links || exit

if [[ "$linkBuildNumber" -ne "$buildNumber" ]]; then
    echo "The current build is $buildNumber but the links are for $linkBuildNumber"
    echo "Please generate them again:"
    echo "python upload-to-google-drive.py $buildNumber --skip_upload"
    exit 3
fi

#Generate website.
cd "$websiteDir"
./make-pages.sh

#Determine which languages are present.
presentLangs=$(perl -we 'my @index = glob("output/index.html.*"); foreach my $file (@index) { if ($file =~ /output\/index\.html\.([a-z]{2})/) { print "$1 "; } }')

cd "$fredDir"
if ! git tag -v "$gitVersion"
then
	echo Verification of tag "$gitVersion" for fred repository failed
	echo Please ensure you have all relevant gpg keys, and check the fingerprints.
	exit 3
fi

cat <<EOF
Using FREENETVERSION "$buildNumber"
Using FREENETTAG "$gitVersion"
Website contains languages: $presentLangs
Using website repo in: "$websiteDir"
EOF

cd "$websiteDir"
echo "Website commit ID is $(git rev-parse --verify HEAD)"
cd "$startingDir"
echo "Fred commit ID is $commitID"
for value in "$buildNumber" "$gitVersion" "$presentLangs"
do
    if [[ ! "$value" ]]
    then
        echo "Unable to find required value. Failed sanity check. Exiting."
        exit 2
    fi
done

if $dryRun; then
    echo -n "Continue dry run [y/N]?"
else
    if $testing; then
        echo -n "Deploy to testing site [y/N]?"
    else
        echo -n "Deploy to live site [y/N]? "
    fi
fi
read response

#Case insensitive.
if [[ $(echo "$response" | tr '[:upper:]' '[:lower:]') != "y" ]]
then
    if $dryRun; then
        echo "User declined to continue dry run. Exiting."
    else
    echo "User declined to deploy. Exiting."
    fi
    exit 1
fi

#Make temporary directory, copy files into it before making substitutions.
#Avoids making changes to source material.
tempSub=$(mktemp -d)
tempBal=$(mktemp -d)
echo "Created temporary directories \"$tempSub\" and \"$tempBal\"."
rsync -ar "$websiteOutputDir/"* "$tempSub"

#Substitute, copying to the money balance substitution directory anything with MONEYBALANCE or MONEYDAYS.
echo "Substituting."

#Including a trailing slash - assumes mktemp -d does not include one.
#Used to strip absolute component from path when copying to substitution dir.
tempSubLength=$((${#tempSub}+1))
for file in $(find "$tempSub" -type f)
do
    if grep -Flq FREENET "$file"
    then
        replace "FREENET_MAIN_JAR_URL" "$FREENET_MAIN_JAR_URL"\
                "FREENET_SOURCE_URL" "$FREENET_SOURCE_URL"\
                "FREENET_INSTALLER_URL" "$FREENET_INSTALLER_URL"\
                "FREENET_INSTALLER_REDIRECT_URL" "https://freenetproject.org/jnlp/freenet_installer.jar"\
                "FREENET_WINDOWS_INSTALLER_URL" "$FREENET_WINDOWS_INSTALLER_URL"\
                "FREENET_MAIN_JAR_SIG_URL" "$FREENET_MAIN_JAR_SIG_URL"\
                "FREENET_SOURCE_SIG_URL" "$FREENET_SOURCE_SIG_URL"\
                "FREENET_INSTALLER_SIG_URL" "$FREENET_INSTALLER_SIG_URL"\
                "FREENET_WINDOWS_INSTALLER_SIG_URL" "$FREENET_WINDOWS_INSTALLER_SIG_URL"\
                -- "$file"
       sed -i 's/FREENETVERSION/'"$buildNumber"'/g;s/FREENETTAG/'"$gitVersion"'/g' "$file"
    fi
    if grep -Fq -e "MONEYBALANCE" -e "MONEYDAYS" "$file"
    then
        relativePath=${file:$tempSubLength}
        echo "\"$relativePath\" contains money substitutions."
        target="$tempBal/$relativePath"
        #Remove filename - up to slash from the back.
        dir=${target%/*}
        mkdir -p "$dir"
        cp -a "$file" "$target"
    fi
done

echo "Substitution complete."

#Set permissions and copy to website root and balance substitution directory.
#Trailing slash on rsync source so that contents of the directory are copied.
echo "Setting permissions."
sudo chmod 700 "$tempBal"
sudo chown -R www-freenet-website:www-freenet-website "$tempBal"
sudo chmod 700 "$tempSub"
sudo chown -R www-freenet-website:www-freenet-website "$tempSub"

if $dryRun; then
    echo "---Dry run---"
    echo "If desired, please inspect these temporary directories:"
    echo " * Would be deployed to balance directory: $tempBal"
    echo " * Would be deployed to website directory: $tempSub"
    echo "Waiting - press a key for the temporary directories to be removed."
    read -er -n 1
elif $testing; then
    echo "Copying to testing target from temporary directories."
    echo "Testing mode: not updating money totals."
    sudo rsync -ar --owner --group --delete "$tempSub"/ "$websiteDeployTestingDir"
else
    echo "Copying to live target from temporary directories."
    sudo rsync -ar --owner --group --delete  "$tempBal"/ "$moneyBalanceDir"
    sudo rsync -ar --owner --group --delete  "$tempSub"/ "$websiteDeployLiveDir"
fi

echo "Removing temporary directories."
sudo rm -rf "$tempSub"
sudo rm -rf "$tempBal"

if $dryRun; then
    echo "Dry run complete."
elif $testing; then
    echo "Deploy to testing site complete."
else
    echo "Updating money totals."
    sudo /root/bin/fix-money-totals
    echo "Deploy to live site complete."
fi

exit 0
